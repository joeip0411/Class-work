{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# FIT9136 Week 9 Lab\n",
    "\n",
    "Author: \n",
    "<br>\n",
    "Date (of creation): 08/10/20\n",
    "<br>\n",
    "Version: Student"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Agenda\n",
    "\n",
    "* Revision\n",
    "**************************\n",
    "* Importance of testing\n",
    "* Is it valid to start every Python script with “try:”?\n",
    "* Should We test Extensively ??\n",
    "**************************\n",
    "* Try & error\n",
    "* Create Graphs\n",
    "* Attempt to complete 10 Minutes to Pandas \n",
    "**************************\n",
    "* Homework\n",
    "    * Python errors\n",
    "    * Assert or Raise\n",
    "    * Think about bugs ?\n",
    "    * Find all the error"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "## Revision"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true,
    "hidden": true
   },
   "source": [
    "### Testing"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "* **Basic Testing**\n",
    "    * Print\n",
    "    * Assert \n",
    "* **Levels of Testing**\n",
    "    * Unit testing\n",
    "    * Integration testing\n",
    "    * System testing\n",
    "    * Acceptance testing\n",
    "* **Debuging**    \n",
    "* **Unit Testing**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true,
    "hidden": true
   },
   "source": [
    "### Error & Exception"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "* **Errors**\n",
    "    * Types of error\n",
    "        * SyntaxError\n",
    "        * NameError\n",
    "        * TypeError\n",
    "        * ValueError\n",
    "        * RuntimeError\n",
    "* **Exceptions handling**\n",
    "    * Try - except\n",
    "    * else\n",
    "    * finally\n",
    "    \n",
    "    \n",
    "* More on: https://docs.python.org/3/library/exceptions.html    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "# SyntaxError:\n",
    "if a_number > 2\n",
    "    print(a_number, “is greater than 2”)\n",
    "\n",
    "\n",
    "# NameError:\n",
    "a_number = random.random()\n",
    "\n",
    "# TypeError:\n",
    "if a_number > 2:\n",
    "    print(a_number + “is greater than 2”)\n",
    "\n",
    "\n",
    "# ValueError:\n",
    "sum_of_two = int(‘1’) + int(‘b’)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-09-30T10:50:00.660338Z",
     "start_time": "2020-09-30T10:50:00.654808Z"
    },
    "heading_collapsed": true,
    "hidden": true
   },
   "source": [
    "### External Libraries"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "* **NumPy** contains really efficient algorithms for mathematics and storage. I consider it to be math++ and almost necessary for efficient programming.\n",
    "\n",
    "* **SciPy** is unfathomably big. If you are going to program for science you need this. It has a lot of libraries that apply very complex algorithms that are widely accepted by their respective fields.\n",
    "\n",
    "* **Matplotlib** is the Mathematical Plotting Library. It makes graphs and it makes them well. It is based on LaTeX and can be used to export graphs you will need for publications.\n",
    "\n",
    "* **Pandas** is the real reason we study the above externals. You are in data science and this is THE data science library. There have been arguments that data scientists don’t really understand the math they are applying and are just learning to navigate Pandas. I would strongly suggest that you learn HOW Pandas works rather than how to use it. It’s the only way to stick out of the crowd of graduate data scientists."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "# Bubble Sort Implementation\n",
    "def bubble_sort(the_list):\n",
    "    # obtain the length of the list\n",
    "    n = len(the_list)\n",
    "    # perform n-1 iterations\n",
    "    for i in range(n-1, 0, -1):\n",
    "        # for each iteration\n",
    "        # move the next largest item to the end\n",
    "        for j in range(i):\n",
    "            # swap if two adjacent items are\n",
    "            # out of order\n",
    "            if the_list[j] > the_list[j+1]:\n",
    "                temp = the_list[j]\n",
    "                the_list[j] = the_list[j+1]\n",
    "                the_list[j+1] = temp\n",
    "                # another swap\n",
    "                # the_list[j], the_list[j+1] = the_list[j+1], the_list[j] \n",
    "                \n",
    "    return the_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "# Selection Sort Implementation\n",
    "def selection_sort(the_list):\n",
    "    # obtain the length of the list\n",
    "    n = len(the_list)\n",
    "    # perform n-1 iterations\n",
    "    for i in range(n-1):\n",
    "        # assume item at index i as the smallest\n",
    "        smallest = i\n",
    "        # check if any other item is smaller\n",
    "        for j in range(i+1, n):\n",
    "            if the_list[j] < the_list[smallest]:\n",
    "                # update the current smallest item\n",
    "                smallest = j\n",
    "\n",
    "        # place the current smallest item\n",
    "        # in its correct position\n",
    "        the_list[smallest], the_list[i] = the_list[i], the_list[smallest]\n",
    "    \n",
    "    return the_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "# Insertion Sort Implementation\n",
    "def insertion_sort(the_list):\n",
    "\n",
    "    # obtain the length of the list\n",
    "    n = len(the_list)\n",
    "\n",
    "    # begin with the first item in the list\n",
    "    # assume as the only item in the sorted sublist\n",
    "    for i in range(1, n):\n",
    "        # indicate the current item to be positioned\n",
    "        current = the_list[i]\n",
    "        # find the correct position where the current\n",
    "        # item should be placed in the sorted sublist\n",
    "        pos = i\n",
    "        while pos > 0 and the_list[pos-1] > current:\n",
    "            # shift items in the sorted sublist\n",
    "            # for those larger than the current item\n",
    "            the_list[pos] = the_list[pos-1]\n",
    "            pos -= 1\n",
    "        # place the current item in its correct position\n",
    "        the_list[pos] = current\n",
    "        \n",
    "    return the_list"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Importance of Testing"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* **Why is it important that tests are pre-planned rather than written after finishing a project?**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# try it out"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Is it valid to start every Python script with “try:”?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* **Is it valid to start every Python script with “try:”? Justify your answer**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-10-10T03:44:39.212940Z",
     "start_time": "2020-10-10T03:44:39.210798Z"
    }
   },
   "outputs": [],
   "source": [
    "# give it go"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Should We test Extensively ??"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* **There could be thousands of different inputs to a program, should we test every possible usage of a program? Justify your answer.**\n",
    "    * Given your answer for the above, would you exhaust your testing if the program were to power an artificial heart?\n",
    "    * What you write a program to help calculate your GPA?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Try & error"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* **Write a program that accepts an input and then converts it to an integer. Your program shouldn’t return an error during its run time, and should contain “try” and “except” statements.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Try it out"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Create Graphs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* **Using matplotlib, create a scatterplot for the following functions over a range of -10 to 10 (for a challenge, plot them in the same window):**\n",
    "    * y = x+2\n",
    "    * y = x^2\n",
    "    * y = x^3\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Try it out"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Attempt to complete 10 Minutes to Pandas"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* **Attempt to complete 10 Minutes to Pandas**\n",
    "\n",
    "* https://pandas.pydata.org/pandas-docs/stable/user_guide/10min.html"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Try it out"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-09-30T10:18:26.786944Z",
     "start_time": "2020-09-30T10:18:26.784423Z"
    },
    "heading_collapsed": true
   },
   "source": [
    "## HomeWork"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "### Python errors\n",
    "\n",
    "* **For each of the following Python errors provide a scenario that would cause it:**\n",
    "\n",
    "    * TypeError\n",
    "    * AttributeError\n",
    "    * IndexError\n",
    "    * ValueError\n",
    "    * ZeroDivisionError\n",
    "    * IndentationError"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-09-30T10:45:15.614472Z",
     "start_time": "2020-09-30T10:45:15.612587Z"
    },
    "hidden": true
   },
   "source": [
    "### Assert or Raise"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "* **Why would we want to use ``assert’’ over ``raise’’?**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-09-30T10:45:15.614472Z",
     "start_time": "2020-09-30T10:45:15.612587Z"
    },
    "hidden": true
   },
   "source": [
    "### Think about bugs ?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "* **Why do you think programs are released with errors and bugs? Why wasn’t as much the case between 1980 and 1999?**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-09-30T10:45:15.614472Z",
     "start_time": "2020-09-30T10:45:15.612587Z"
    },
    "heading_collapsed": true,
    "hidden": true
   },
   "source": [
    "### Find all Error"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "* **Find all the errors in the code:**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "## A\n",
    "def add_to_list_in_dict(thedict, listname, element):\n",
    "    if listname in thedict:\n",
    "        l = thedict[listname]\n",
    "        print(\"%s already has %d elements.\" % (listname, len(l)))\n",
    "    else:\n",
    "        thedict[listname] = []\n",
    "        print(\"Created %s.\" % listname)\n",
    "\n",
    "    thedict[listname].append(element)\n",
    "\n",
    "    print(\"Added %s to %s.\" % (element, listname))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "## B exe 1 3\n",
    "for x in range(a, b):\n",
    "    print(\"(%f, %f, %f)\" % my_list[x])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "## C exe 1 4 \n",
    "\n",
    "product = 0\n",
    "for i in range(10):\n",
    "    product *= i\n",
    "\n",
    "sum_squares = 0\n",
    "for i in range(10):\n",
    "    i_sq = i**2\n",
    "sum_squares += i_sq\n",
    "\n",
    "nums = 0\n",
    "for num in range(10):\n",
    "    num += num"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  },
  "latex_envs": {
   "LaTeX_envs_menu_present": true,
   "autoclose": false,
   "autocomplete": true,
   "bibliofile": "biblio.bib",
   "cite_by": "apalike",
   "current_citInitial": 1,
   "eqLabelWithNumbers": true,
   "eqNumInitial": 1,
   "hotkeys": {
    "equation": "Ctrl-E",
    "itemize": "Ctrl-I"
   },
   "labels_anchors": false,
   "latex_user_defs": false,
   "report_style_numbering": false,
   "user_envs_cfg": false
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
