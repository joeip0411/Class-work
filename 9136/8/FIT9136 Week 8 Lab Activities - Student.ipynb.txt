{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# FIT9136 Week 8 Lab\n",
    "\n",
    "Author: \n",
    "<br>\n",
    "Date (of creation): 22/08/20\n",
    "<br>\n",
    "Version: Student"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Agenda\n",
    "\n",
    "* Revision\n",
    "**************************\n",
    "* Complexity\n",
    "* Perform Binary Search\n",
    "* Perform Sorts\n",
    "**************************\n",
    "* Linear Regression Model \n",
    "* Find Closest elements \n",
    "**************************\n",
    "* Homework\n",
    "    * Q1\n",
    "    * Cocktail Sort"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Revision"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "### Complexity"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "* **Best Case**: \n",
    "    * Minimum running time over all possible inputs of a given size\n",
    "* **Worst Case**: \n",
    "    * Maximum running time over all possible inputs of a given size\n",
    "* **Big O notation**: \n",
    "    * it is NOT a measure of time itself, It descibe how time grows based on the size of the input (usually denoted by as n)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "### Search Algorithms"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "\n",
    "A process of finding a particular data item (or a group of data items) within a sequence-based collection based on certain criteria\n",
    "\n",
    "* **Linear Search**:\n",
    "    * It is a method for finding an element within a list. It sequentially checks each element of the list until a match is found or the whole list has been searched.\n",
    "    * Worst case: O(N)\n",
    "    * Best case: O(1)\n",
    "* **Binary Search**:\n",
    "    * It is an efficient algorithm for finding an item from a sorted list of items. It works by repeatedly dividing in half the portion of the list that could contain the item, until you've narrowed down the possible locations to just one.\n",
    "    * Worst case: O(log(n))\n",
    "    * Best case: O(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "## Linear Search Implementation\n",
    "\n",
    "# defining function for linear search, which accepts \n",
    "# the list of numbers and target item.\n",
    "def linear_search(the_list, target_item):\n",
    "    \n",
    "    # obtain the length of the_list\n",
    "    n = len(the_list)\n",
    "    \n",
    "    for i in range(n):\n",
    "        # if the target is found\n",
    "        if the_list[i] == target_item:\n",
    "            return True\n",
    "\n",
    "    # search through the list\n",
    "    # the target is not found\n",
    "    return False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "## Binary Search Implementation\n",
    "\n",
    "def binary_search(the_list, target_item):\n",
    "    low = 0\n",
    "    high = len(the_list)-1\n",
    "\n",
    "    # repeatedly divide the list in half\n",
    "    # as long as the target item is not found\n",
    "    while low <= high:\n",
    "\n",
    "        # find the mid position\n",
    "        mid = (low + high) // 2\n",
    "\n",
    "        if the_list[mid] == target_item:\n",
    "            return True\n",
    "        elif target_item < the_list[mid]:\n",
    "            high = mid - 1 # search lower half\n",
    "        else:\n",
    "            low = mid + 1  # search upper half\n",
    "\n",
    "    # the list cannot be further divided\n",
    "    # the target is not found\n",
    "    return False"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-09-30T10:50:00.660338Z",
     "start_time": "2020-09-30T10:50:00.654808Z"
    },
    "heading_collapsed": true
   },
   "source": [
    "### Sort Algorithms"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "A process of re-ordering or re-arranging data items within a collection based on certain characteristics/attributes\n",
    "\n",
    "\n",
    "* **Bubble Sort**:\n",
    "    * It is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted.\n",
    "    * Worst case: O(n^2)\n",
    "    * Best case: O(1)\n",
    "* **Selection Sort**:\n",
    "    * It is an in-place comparison sorting algorithm, which sorts an array by repeatedly finding the minimum element.\n",
    "    * Worst case: O(n^2)\n",
    "    * Best case: O(n^2)\n",
    "* **Insertion Sort**:\n",
    "    * It is a simple sorting algorithm that builds the final sorted array (or list) one item at a time.\n",
    "    * Worst case: O(n^2)\n",
    "    * Best case: O(n)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "# Bubble Sort Implementation\n",
    "\n",
    "def bubble_sort(the_list):\n",
    "    # obtain the length of the list\n",
    "    n = len(the_list)\n",
    "    # perform n-1 iterations\n",
    "    for i in range(n-1, 0, -1):\n",
    "        # for each iteration\n",
    "        # move the next largest item to the end\n",
    "        for j in range(i):\n",
    "            # swap if two adjacent items are\n",
    "            # out of order\n",
    "            if the_list[j] > the_list[j+1]:\n",
    "                temp = the_list[j]\n",
    "                the_list[j] = the_list[j+1]\n",
    "                the_list[j+1] = temp\n",
    "                \n",
    "    return the_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "# Selection Sort Implementation\n",
    "\n",
    "def selection_sort(the_list):\n",
    "\n",
    "    # obtain the length of the list\n",
    "    n = len(the_list)\n",
    "    # perform n-1 iterations\n",
    "    for i in range(n-1):\n",
    "        # assume item at index i as the smallest\n",
    "        smallest = i\n",
    "        # check if any other item is smaller\n",
    "        for j in range(i+1, n):\n",
    "            if the_list[j] < the_list[smallest]:\n",
    "                # update the current smallest item\n",
    "                smallest = j\n",
    "\n",
    "        # place the current smallest item\n",
    "        # in its correct position\n",
    "        the_list[smallest], the_list[i] = the_list[i], the_list[smallest]\n",
    "    \n",
    "    return the_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "# Insertion Sort Implementation\n",
    "\n",
    "def insertion_sort(the_list):\n",
    "\n",
    "    # obtain the length of the list\n",
    "    n = len(the_list)\n",
    "\n",
    "    # begin with the first item in the list\n",
    "    # assume as the only item in the sorted sublist\n",
    "    for i in range(1, n):\n",
    "        # indicate the current item to be positioned\n",
    "        current = the_list[i]\n",
    "        # find the correct position where the current\n",
    "        # item should be placed in the sorted sublist\n",
    "        pos = i\n",
    "        while pos > 0 and the_list[pos-1] > current:\n",
    "            # shift items in the sorted sublist\n",
    "            # for those larger than the current item\n",
    "            the_list[pos] = the_list[pos-1]\n",
    "            pos -= 1\n",
    "        # place the current item in its correct position\n",
    "        the_list[pos] = current\n",
    "        \n",
    "    return the_list"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "## Complexity"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "**Find Complexity for Following Codes:**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true,
    "hidden": true
   },
   "source": [
    "### A"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "i = 0\n",
    "\n",
    "while i<5:\n",
    "    for x in range(i):\n",
    "        print(x)\n",
    "    i +=1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true,
    "hidden": true
   },
   "source": [
    "### B"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "def foo(li):\n",
    "    \n",
    "    total = 0\n",
    "    \n",
    "    for i in range(len(li)):\n",
    "        for _ in range(3):\n",
    "            total += li[i]\n",
    "            \n",
    "    return total"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true,
    "hidden": true
   },
   "source": [
    "### C"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "def foo(li):\n",
    "    \n",
    "    x = 0\n",
    "    \n",
    "    while True:\n",
    "        if x == len(li):\n",
    "            return\n",
    "        else:\n",
    "            print(li[x])\n",
    "            x += 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "## Perform Binary Search"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "**Perform Binary Search on the following list, write out each probe for each step:**\n",
    "\n",
    "[1, 2, 3, 5, 5, 6, 8, 10, 11, 15] searching for 2, then searching for 16"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "## Perform Sorts"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "**For Bubble, Insertion, and Selection Sort, sort the following list, showing the list after each item is put in its correct location:**\n",
    "\n",
    "[5, 6, 3, 7, 2, 1]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "## Simple Linear Model Model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "* Simple linear regression is an approach for predicting a response using a single feature.\n",
    "* It is assumed that the two variables are linearly related. Hence, we try to find a linear function that predicts the response value(y) as accurately as possible as a function of the feature or independent variable(x).\n",
    "\n",
    "* The task is to find a line which fits best in above scatter plot so that we can predict the response for any new feature values. (i.e a value of x not present in dataset). This line is called regression line.\n",
    "\n",
    "* The equation of regression line is represented as: \n",
    "    * Y = mX + C, \n",
    "        * where, m = slope & C = Intercept\n",
    "        * m,C is called coefficent\n",
    "        \n",
    "        \n",
    "* Read more about it here: https://en.wikipedia.org/wiki/Simple_linear_regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "#Try it out"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "## Find Closest Element"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "**Find k closest elements to a given value**\n",
    "Given a sorted array arr[] and a value X, find the k closest elements to X in arr[].\n",
    "\n",
    "* **Input**: \n",
    "    * K = 4, \n",
    "    * X = 35\n",
    "    * arr[] = {12, 16, 22, 30, 35, 39, 42, \n",
    "               45, 48, 50, 53, 55, 56}\n",
    "* **Output**: 30 39 42 45"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "# Try it out"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-09-30T10:18:26.786944Z",
     "start_time": "2020-09-30T10:18:26.784423Z"
    }
   },
   "source": [
    "## HomeWork"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Q1. Why are searching algorithms designed for unsorted elements bounded by O(N)?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-09-30T10:45:15.614472Z",
     "start_time": "2020-09-30T10:45:15.612587Z"
    }
   },
   "source": [
    "### Q2. Cocktail Sort"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Cocktail shaker Sort is a variant of Bubble Sort that reverses the sort every other item. It will bring the largest item to its correct location, then on the way back pull the smallest item in the opposite direction."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  },
  "latex_envs": {
   "LaTeX_envs_menu_present": true,
   "autoclose": false,
   "autocomplete": true,
   "bibliofile": "biblio.bib",
   "cite_by": "apalike",
   "current_citInitial": 1,
   "eqLabelWithNumbers": true,
   "eqNumInitial": 1,
   "hotkeys": {
    "equation": "Ctrl-E",
    "itemize": "Ctrl-I"
   },
   "labels_anchors": false,
   "latex_user_defs": false,
   "report_style_numbering": false,
   "user_envs_cfg": false
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
